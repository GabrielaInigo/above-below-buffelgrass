bee_habitat_study <- data.frame(Habitat, Bee_colonies)
barplot(bee_habitat_study, main = "Bee Habitat Study")
bee_habitat_study <- data.frame(Habitat, Bee_colonies)
Bee_colonies <- c(33, 30, 29, 4, 4)
bee_habitat_study <- data.frame(Habitat, Bee_colonies)
barplot(bee_habitat_study, main = "Bee Habitat Study")
barplot(bee_habitat_study$Bee_colonies, main = "Bee Habitat Study")
barplot(bee_habitat_study$Bee_colonies, names.arg = bee_habitat_study$Habitat,
main = "Bee Habitat Study")
barplot(bee_habitat_study$Bee_colonies, names.arg = bee_habitat_study$Habitat,
main = "Bee Habitat Study", col = "lightyellow2")
barplot(bee_habitat_study$Bee_colonies, names.arg = bee_habitat_study$Habitat,
main = "Bee Habitat Study", col = "gold2")
# a) Make a boxplot of the data
boxplot(drug_study, main = "Number of Seizures", col = c("green", "orange"))
hist(body_temp, main = "Body Temperature of Healthy People",
xlab = "Body Temperature", col = "lightblue3")
# a) Make a boxplot of the data
boxplot(drug_study, main = "Number of Seizures", col = c("green", "orange"))
barplot(bee_habitat_study$Bee_colonies, names.arg = bee_habitat_study$Habitat,
main = "Bee Habitat Study", col = "gold2")
# a) Make a boxplot of the data
boxplot(drug_study, main = "Number of Seizures", col = c("darkorange", "darkorange4"))
# a) Make a boxplot of the data
boxplot(drug_study, main = "Number of Seizures", col = c("darkorange", "darkorange3"))
# a) Make a boxplot of the data
boxplot(drug_study, main = "Number of Seizures", col = c("darkorange", "darkorange4"))
# b) Test the hypothesis of no-association
chisq.test(bee_habitat_study$Habitat)
# b) Test the hypothesis of no-association
chisq.test(bee_habitat_study$Bee_colonies)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
library("ggplot2")
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
ggplot(data = weather1, aes(x = temp)) +
geom_histogram(color = "white", fill = "tomato") +
ggtitle("Histogram of NYC Temperature") +
ylab("Observations") +
xlab("Temperature")
colnames(weather)
install.packages("nycflights13")
library("nycflights13")
data("weather")
weather1 <- subset(weather, month == 1)
knitr::opts_chunk$set(error = TRUE)
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
ggplot(data = weather1, aes(x = temp)) +
geom_histogram(color = "white", fill = "tomato") +
ggtitle("Histogram of NYC Temperature") +
ylab("Observations") +
xlab("Temperature")
install.packages("nycflights13")
library("nycflights13")
data("weather")
install.packages("nycflights13")
install.packages("nycflights13")
library("nycflights13")
data("weather")
install.packages("nycflights13")
install.packages("ggplot2", dependencies = TRUE, repos = "http://cran.us.r-project.org/")
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE, repos = "http://cran.us.r-project.org/")
# Set working directory
setwd("/Users/gabrielainigo/Documents/R")
ozone <- read.table("ozone.txt", header = T )
head(ozone)
pairs(ozone)
ozone_lm <- lm(ozone ~ rad + temp + wind, data = ozone)
summary(ozone_lm)
library(car)
vif(ozone_lm)
check_model(ozone_lm)
check_model(ozone_lm)
library(performance)
check_model(ozone_lm)
diminish <- read.table("diminish.txt", header = T)
head(diminish)
diminish_lm <- lm(yv ~ xv, data = diminish)
summary(diminish_lm)
diminish_poly <- lm(yv ~ xv + I(xv^2), data = diminish)
summary(diminish_poly)
library(MASS)
AIC(diminish_lm, diminish_poly) #the lower AIC, the better
ggplot(data = diminish, aes(x = xv, y = yv)) +
geom_point() +
geom_smooth(method='lm', formula = y ~ poly(x,2), se = F) +
geom_smooth(method='lm', formula = y ~ x, size = 1, se = F, color="red") +
theme_classic()
library(ggplot2)
ggplot(data = diminish, aes(x = xv, y = yv)) +
geom_point() +
geom_smooth(method='lm', formula = y ~ poly(x,2), se = F) +
geom_smooth(method='lm', formula = y ~ x, size = 1, se = F, color="red") +
theme_classic()
stork <- read.table("stork.txt", header = T)
head(stork)
ggplot(data = stork, aes(x = Corticosterone, y = Survival)) +
geom_point() +
theme_classic()
summary(stork_glm.b)
stork_glm.b <- glm(Survival ~ Corticosterone, data = stork, family = binomial)
summary(stork_glm.b)
1-(stork_glm.b$deviance/stork_glm.b$null.deviance)
r2(stork_glm.b)
anova(stork_glm.b, test = "Chisq")
anova(stork_glm.b, test = "Chisq")
ggplot(data = stork, aes(x = Corticosterone, y = Survival)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial"), se = F) +
theme_classic()
check_model(stork_glm.b)
cluster <- read.table("clusters.txt", header = TRUE)
head(cluster)
library(ggplot2)
ggplot(data = cluster, aes(x = Distance, y = Cancers)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Distance from nuclear plant (Km)") +
ylab("Cancer cases per clinic") +
theme_classic()
# Make a histogram to see the distribution of the data
hist(cluster$Cancers)
cluster_glm.p <- glm(Cancers ~ Distance, data = cluster, family = poisson)
install.packages("DHARMa")
library(DHARMa)# model diagnostic for glms
simulateResiduals(cluster_glm.p, plot = T)
1-(cluster_glm.p$deviance/cluster_glm.p$null.deviance)
r2(cluster_glm.p)
head(cluster)
View(cluster)
anova(cluster_glm.p, test = "Chisq")
ggplot(data = cluster, aes(x = Distance, y = Cancers)) +
geom_point() +
geom_smooth(method = "glm",  method.args = list(family = "poisson"), se = F) +
xlab("Distance from nuclear plant (Km)") +
ylab("Cancer cases per clinic") +
theme_classic()
check_overdispersion(cluster_glm.p)
install.packages("vegan")
install.packages("lme4")
install.packages("MASS")
install.packages("MASS")
install.packages("lme4")
library(vegan)
library(lme4)
library(MASS)
cluster_glm.nb <- glm.nb(Cancers ~ Distance, data = cluster)
# i) Check this last model assumptions
check_model(cluster_glm.nb)
jaws <- read.table("jaws.txt", header = F)
head(jaws)
jaws <- read.table("jaws.txt", header = T)
head(jaws)
library(ggplot2)
ggplot(data = jaws, aes(x = age, y = bone)) +
geom_point()
jaws_aer <- nls(bone ~ 1 - e^(-c*age))
jaws_aer <- nls(data = jaws, model = bone ~ 1 - e^(-c*age))
jaws_aer <- nls(data = jaws, formula = bone ~ 1 - e^(-c*age))
selfStart()
jaws_aer <- nls(data = jaws, formula = bone ~ 1 - e^(-c*age))
selfStart()
?selfStart
jaws_aer <- nls(data = jaws, formula = bone ~ 1 - e^(-c*age))
selfStart(jaws_aer)
jaws_aer <- nls(data = jaws, formula = bone ~ 1 - e^(-c*age))
selfStart(jaws_aer)
selfStart(jaws_aer)
jaws_aer <- nls(data = jaws, formula = bone ~ 1 - e^(-c*age))
selfStart(jaws_aer) <- nls(data = jaws, formula = bone ~ 1 - e^(-c*age))
jaws_aer <- nls(data = jaws, selfStart(jaws_aer), formula = bone ~ 1 - e^(-c*age))
jaws_aer <- nls(data = jaws, selfStart(), formula = bone ~ 1 - e^(-c*age))
jaws_aer <- nls(data = jaws, selfStart(model), formula = bone ~ 1 - e^(-c*age))
jaws_aer <- nls(data = jaws, selfStart(), formula = bone ~ (1) - e^(-c*age))
jaws_aer <- nls(data = jaws, selfStart( bone ~ (1) - e^(-c*age)))
jaws_mmm <- nls(data = jaws, selfStart(), formula = bone ~ (a * age) / (1 + (b*age)))
ggplot(data = jaws, aes(x = age, y = bone)) +
geom_point()
#Non-linear regression
#the relationship cannot be linearized
#inform R of the exact nature of the equation as part of the model formula
#need to provide starting values (convergence of nonlinear models depends critically on having good starting values)
#the default fitting algorithm is Gauss-Newton
jaws<-read.table("jaws.txt", sep="\t", header=T)
plot(jaws$age, jaws$bone)
ggplot(data = jaws, aes(x = age, y = bone)) +
geom_point()
jaws.nls<-nls(bone~a*age/(1+b*age), start=list(a=100, b=0.1), data=jaws)
summary(jaws.nls)
jaws_mmm <- nls(bone ~ a * age / (1 + (b*age)), start = list(a = 100, b = 0.1), data = jaws)
jaws_aer <- nls(bone ~ a(1 - exp(-c*age)), start = list(a = 100, c = 0.1), data = jaws)
jaws_aer <- nls(bone ~ a * (1 - exp(-c*age)), start = list(a = 100, c = 0.1), data = jaws)
summary(jaws)
jaws.nls<-nls(bone~a*age/(1+b*age), start=list(a=100, b=0.1), data=jaws)
summary(jaws.nls)
summary(jaws_aer)
jaws_mmm <- nls(bone ~ a * age / (1 + (b*age)), start = list(a = 100, b = 0.1), data = jaws)
summary(jaws_mmm)
jaws.nls<-nls(bone~a*age/(1+b*age), start=list(a=100, b=0.1), data=jaws)
summary(jaws.nls)
jaws_aer <- nls(bone ~ a * (1 - exp(-c*age)), start = list(a = 100, c = 0.1), data = jaws)
summary(jaws_aer)
jaws_aer_rss <- (13.1)^2 * 52
jaws_aer_rss
jaws_mmm <- nls(bone ~ a * age / (1 + (b*age)), start = list(a = 100, b = 0.1), data = jaws)
summary(jaws_mmm)
jaws_mmm_rss <- (13.77)^2 * 52
jaws_null <- lm(bone ~ 1, data = jaws)
summary(jaws_null)
jaws_null_rss <- (33.37)^2 * 53
jaws_null_tss <- (33.37)^2 * 53
jaws_null_tss <- (33.37)^2 * 53
100*(jaws_null_tss - jaws_aer_rss)/jaws_null_tss
100*(jaws_null_tss - jaws_mmm_rss)/jaws_null_tss
library(MASS)
AIC(jaws_aer, jaws_mmm) #the lower AIC, the better
jaws.nls<-nls(bone~a*age/(1+b*age), start=list(a=100, b=0.1), data=jaws)
summary(jaws.nls)
lines(seq(0, 50, 0.1), predict(jaws.nls, list(age=seq(0, 50, 0.1)), type="response"), col="red", lwd=3)
ggplot(data = jaws, aes(x = age, y = bone)) +
geom_point() +
geom_smooth(predict(jaws_aer), se = F) +
geom_smooth(predict(jaws_mmm), se = F, color="red") +
theme_classic()
ggplot(data = jaws, aes(x = age, y = bone)) +
geom_point() +
geom_smooth(lines(seq(0, 50, 0.1), predict(jaws_aer, list(age = seq(0, 50, 0.1)),
type="response"), col="red", lwd=3)) +
geom_smooth(lines(seq(0, 50, 0.1), predict(jaws.nls, list(age=seq(0, 50, 0.1)),
type="response"), col="blue", lwd=3)) +
theme_classic()
ggplot(data = jaws, aes(x = age, y = bone)) +
geom_point() +
geom_line(lines(seq(0, 50, 0.1), predict(jaws_aer, list(age = seq(0, 50, 0.1)),
type="response"), col="red", lwd=3)) +
geom_smooth(lines(seq(0, 50, 0.1), predict(jaws.nls, list(age=seq(0, 50, 0.1)),
type="response"), col="blue", lwd=3)) +
theme_classic()
ggplot(data = jaws, aes(x = age, y = bone)) +
geom_point() +
geom_smooth(lines(seq(0, 50, 0.1), predict(jaws_aer, list(age = seq(0, 50, 0.1)),
type="response"), col="red", lwd=3)) +
geom_smooth(lines(seq(0, 50, 0.1), predict(jaws.nls, list(age=seq(0, 50, 0.1)),
type="response"), col="blue", lwd=3)) +
theme_classic()
lines(seq(0, 50, 0.1), predict(jaws.nls, list(age=seq(0, 50, 0.1)), type="response"), col="red", lwd=3)
ggplot(data = jaws, aes(x = age, y = bone)) +
geom_point()
library(lme4)
library(lmerTest)
estuaries <- read.csv("Estuaries.csv", header = TRUE, row.names = 1)
head(estuaries)
library(lme4)
library(lmerTest)
estuaries <- read.csv("Estuaries.csv", header = TRUE, row.names = 1)
head(estuaries)
estuaries_lme <- lmer(Total~ Modification +(1|Estuary), data = estuaries)
summary(estuaries_lme)
summary(estuaries_lme)
library(lme4)
library(lmerTest)
estuaries <- read.csv("Estuaries.csv", header = TRUE, row.names = 1)
head(estuaries)
estuaries_lme <- lmer(Total ~ Modification + (1|Estuary), data = estuaries)
library(lme4)
library(lmerTest)
estuaries_lme <- lmer(Total ~ Modification + (1|Estuary), data = estuaries)
download.packages(lme4)
# Set working directory
setwd("/Users/gabrielainigo/Documents/R")
library(lme4)
library(DHARMa)
library(lme4)
install.packages("DHARMa")
install.packages("DHARMa")
library(DHARMa)# model diagnostic for glms
library(lme4)
library(lmerTest)
estuaries <- read.csv("Estuaries.csv", header = TRUE, row.names = 1)
head(estuaries)
estuaries_lme <- lmer(Total ~ Modification + (1|Estuary), data = estuaries)
summary(estuaries_lme)
estuaries_lme <- lmer(Total ~ Modification + (1|Estuary), data = estuaries)
library(lme4)
library(lmerTest)
library(lme4)
library(lmerTest)
estuaries <- read.csv("Estuaries.csv", header = TRUE, row.names = 1)
head(estuaries)
#Model comparison
fit.lm <- lm(weight ~ height, data=women)
summary(fit.lm)
fit.poly <- lm(weight ~ height + I(height^2), data=women)
summary(fit.poly)
plot(women$height, women$weight, xlab="Height (in inches)", ylab="Weight (in pounds)")
abline(fit.lm, col="blue", lwd=3)
lines(women$height, predict(fit.poly), col="red", lwd=3)
#Likelihood ratio test (LRT)
anova(fit.lm, fit.poly, test='Chisq') #same as anova(fit.lm, fit.poly, test='LRT')
1 - pchisq(-2 * (as.numeric(logLik(fit.lm))-as.numeric(logLik(fit.poly))), df=1)
#AIC
AIC(fit.lm, fit.poly) #the lower AIC, the better
compare_performance(fit.lm, fit.poly, rank=T) #performance R package
#Collinearity
states<- as.data.frame(state.x77[,1:6])
pairs(states)
murder.lm<-lm(Murder ~ Population + Income + Illiteracy + `Life Exp` + `HS Grad`, data=states)
library(car)
vif(murder.lm) #Values higher than 5 are worrisome, higher than 10 need to be dealt with
#Variable selection (stepwise model selection)
#Variables are added to or deleted from a model one at a time, until some stopping criterion is reached.
murder.lm.step<-step(murder.lm, direction='backward')
summary(murder.lm.step)
library(vegan)#multivar stats in ecology
library(data.table)
library(dbplyr) #data wrangling
library(tidyverse)
library(ggplot2) #pretty plots
library(lme4) #mixed effect models
setwd("/Users/gabrielainigo/Documents/GitHub/buffelgrass_soilmicrobiome/")
metadata <- read.csv("data/mexbuff_metadata.csv", row.names = 1)
# 16S
b_taxa = read.csv("data/16S/taxa_table_16S.csv", header = T)
b_asv = read.csv("data/16S/asv_table_16S.csv", header = T)
# ITS
f_taxa = read.csv("data/ITS/taxa_table_ITS.csv", header = T)
f_asv = read.csv("data/ITS/asv_table_ITS.csv", header = T)
# Check out blanks 16S
b_blanks = b_asv[c(1,2,3,4,5,6,7),]
# Check if there is no contamination by adding the blanks
rowSums(b_blanks)
# remove blanks from asv table
b_asv = data.frame(b_asv[-c(1,2,3,4,5,6,7),])
# Check out blanks ITs
f_blanks = f_asv[c(1,2,3,4,5,6,7),]
# Check if there is no contamination by adding the blanks
rowSums(f_blanks)
# remove blanks from asv table
f_asv = data.frame(f_asv[-c(1,2,3,4,5,6,7),])
# remove unwanted taxonomy from bacteria
fil_b_taxa = b_taxa[!b_taxa$Order %in% "Chloroplast",] %>% droplevels()
fil_b_taxa = fil_b_taxa[!fil_b_taxa$Family %in% "Mitochondria",] %>% droplevels()
fil_b_taxa = fil_b_taxa[!fil_b_taxa$Kingdom %in% "Eukaryota",] %>% droplevels()
fil_b_taxa = fil_b_taxa[!(is.na(fil_b_taxa$Kingdom)),] %>% droplevels()
# remove from ASV table
fil_b_asv<-b_asv[,rownames(fil_b_taxa)]
# remove unwanted taxonomy from fungi
fil_f_taxa = f_taxa[f_taxa$Kingdom %in% "k__Fungi",] %>% droplevels()
# remove from ASV table
fil_f_asv<-f_asv[,rownames(fil_f_taxa)]
View(metadata)
View(fil_f_asv)
#-----------------------------------------------------------------------
# Data exploration
#-----------------------------------------------------------------------
# 1. Summary
#16S
hist(rowSums(fil_b_asv)) # distribucion de la abundancia total de cada row
summary(rowSums(fil_b_asv))
sd(rowSums(fil_b_asv))
sort(rowSums(fil_b_asv)) # cm2 is the one with ~4000
# Remove cm2
fil_b_asv  <- fil_b_asv[!(row.names(fil_b_asv) == "cm2"),] # asv - amplicon sequence variant
b_metadata <- metadata
b_metadata = b_metadata[!metadata$sampleid %in% "cm2",] %>% droplevels()
View(b_metadata)
View(b_metadata)
# 16S
b_metadata$Richness.16S.rar<-specnumber(rrarefy(fil_b_asv, sample=40000)) # remove small outliers
b_metadata$Shannon.16S <- diversity(rrarefy(fil_b_asv, sample=40000), index = "shannon")
# By site: I = (induced), C = (invasion + buffel), N = (invasion - buffel)
ggplot(b_metadata, aes(x=Site, y=Richness.16S.rar)) +
geom_jitter(position=position_jitterdodge(), aes(color=Site), size=2)+
geom_boxplot(aes(fill=Site), outlier.shape = NA, alpha = 0.4)+
xlab(NULL) +
ylab("Bacterial/archaeal phylotype richness") +
scale_x_discrete(labels= c(" (C) invasion + buffel"," (I) induced","(N) invasion - buffel"))+
scale_fill_manual(values = c("tomato2", "orangered4", "goldenrod"))+ #for category
scale_color_manual(values = c("tomato2", "orangered4", "goldenrod"))+ #for category
theme_classic()+
theme(legend.position="none",text = element_text(size=22))
View(metadata)
View(b_metadata)
#16S
hist(rowSums(fil_b_asv))
summary(rowSums(fil_b_asv))
sd(rowSums(fil_b_asv))
sort(rowSums(fil_b_asv)) # cm2 is the one with ~4000
# Remove cm2
fil_b_asv  <- fil_b_asv[!(row.names(fil_b_asv) == "cm2"),]
b_metadata <- metadata
b_metadata = b_metadata[!metadata$sampleid %in% "cm2",] %>% droplevels()
summary(rowSums(fil_b_asv)) # min = 40286
#ITS
hist(rowSums(fil_f_asv))
summary(rowSums(fil_f_asv))
sd(rowSums(fil_f_asv))
sort(rowSums(fil_f_asv)) # iob5 is the one with ~1300
# Remove iob5
fil_f_asv  <- fil_f_asv[!(row.names(fil_f_asv) == "iob5"),]
f_metadata <- metadata
f_metadata = f_metadata[!metadata$sampleid %in% "iob5",] %>% droplevels()
summary(rowSums(fil_f_asv))# min 27640
# create copy abundance matrix
fil_asv_ab <- fil_b_asv
# convert abundance to presence absence
fil_asv_ab[fil_asv_ab > 0] <- 1
#calculate the mean of the total number of phylotypes in samples
mean(rowSums(fil_asv_ab))
range(rowSums(fil_asv_ab))
summary(rowSums(fil_asv_ab))
sd(rowSums(fil_asv_ab)) # cosas para reportar en el paper
#ITS
# create copy abundance matrix
fil_asv_ab <- fil_f_asv
# convert abundance to presence abscence
fil_asv_ab[fil_asv_ab > 0] <- 1
#calculate the mean of the total number of phylotypes in samples
mean(rowSums(fil_asv_ab))
range(rowSums(fil_asv_ab))
summary(rowSums(fil_asv_ab))
sd(rowSums(fil_asv_ab))
# 16S
b_metadata$Richness.16S.rar<-specnumber(rrarefy(fil_b_asv, sample=40000)) # remove small outliers
b_metadata$Shannon.16S <- diversity(rrarefy(fil_b_asv, sample=40000), index = "shannon")
# ITS
f_metadata$Richness.16S.rar<-specnumber(rrarefy(fil_f_asv, sample=20000))
f_metadata$Shannon.16S <- diversity(rrarefy(fil_f_asv, sample=20000), index = "shannon")
View(b_metadata)
soil_b_metadata <- data.frame(b_metadata[c(, IOB1,IOB2, IOB3, IOB4, IOB5, ION1, ION2, ION3, ION4, ION5,
IOD1, IOD2, IOD3, IOD4, IOD5, NON1, NON2, NON3, NON4, NON4,
NOD1, NOD2, NOD3, NOD4, NOD5, COB1, COB2, COB3, COB4, COB5)])
soil_b_metadata <- data.frame(b_metadata[c(,IOB1,IOB2, IOB3, IOB4, IOB5, ION1, ION2, ION3, ION4, ION5,
IOD1, IOD2, IOD3, IOD4, IOD5, NON1, NON2, NON3, NON4, NON4,
NOD1, NOD2, NOD3, NOD4, NOD5, COB1, COB2, COB3, COB4, COB5)])
soil_b_metadata <- subset.data.frame(b_metadata[("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
soil_b_metadata <- subset.data.frame(b_metadata[("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
soil_b_metadata <- subset(b_metadata[("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
soil_b_metadata <- subset.data.frame(b_metadata[c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON4",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
View(soil_b_metadata)
soil_b_metadata <- subset.data.frame(b_metadata[c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON5",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
View(soil_b_metadata)
soil_f_metadata <- subset.data.frame(f_metadata[c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON5",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
View(f_metadata)
View(soil_f_metadata)
cover_b_metadata <- subset.data.frame(b_metadata[c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON5",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
cover_f_metadata <- subset.data.frame(f_metadata[c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON5",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
tree_b_metadata <- subset.data.frame(b_metadata[-c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON5",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
tree_b_metadata <- subset.data.frame(b_metadata[!c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON5",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
tree_b_metadata <- subset.data.frame(b_metadata[-c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON5",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
tree_f_metadata <- subset.data.frame(f_metadata[-c("IOB1","IOB2", "IOB3", "IOB4", "IOB5",
"ION1", "ION2", "ION3", "ION4", "ION5",
"IOD1", "IOD2", "IOD3", "IOD4", "IOD5",
"NON1", "NON2", "NON3", "NON4", "NON5",
"NOD1", "NOD2", "NOD3", "NOD4", "NOD5",
"COB1", "COB2", "COB3", "COB4", "COB5"),])
# ITS
f_metadata$Richness.ITS.rar<-specnumber(rrarefy(fil_f_asv, sample=20000))
f_metadata$Shannon.ITS <- diversity(rrarefy(fil_f_asv, sample=20000), index = "shannon")
View(b_metadata)
View(f_metadata)
